{"version":3,"file":"node_modules_react-native_Libraries_NativeComponent_ViewConfigIgnore_js-node_modules_invarian-a9f2b2.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/NativeComponent/ViewConfigIgnore.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js","webpack:///./node_modules/react-native/Libraries/Utilities/Platform.android.js","webpack:///./node_modules/react-native/src/private/specs/modules/NativePlatformConstantsAndroid.js","webpack:///./node_modules/invariant/browser.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\nconst ignoredViewConfigProps = new WeakSet<{...}>();\n\n/**\n * Decorates ViewConfig values that are dynamically injected by the library,\n * react-native-gesture-handler. (T45765076)\n */\nexport function DynamicallyInjectedByGestureHandler<T: {...}>(object: T): T {\n  ignoredViewConfigProps.add(object);\n  return object;\n}\n\n/**\n * On iOS, ViewManager event declarations generate {eventName}: true entries\n * in ViewConfig valueAttributes. These entries aren't generated for Android.\n * This annotation allows Static ViewConfigs to insert these entries into\n * iOS but not Android.\n *\n * In the future, we want to remove this platform-inconsistency. We want\n * to set RN$ViewConfigEventValidAttributesDisabled = true server-side,\n * so that iOS does not generate validAttributes from event props in iOS RCTViewManager,\n * since Android does not generate validAttributes from events props in Android ViewManager.\n *\n * TODO(T110872225): Remove this logic, after achieving platform-consistency\n */\nexport function ConditionallyIgnoredEventHandlers<T: {[name: string]: true}>(\n  value: T,\n): T | void {\n  if (Platform.OS === 'ios') {\n    return value;\n  }\n  return undefined;\n}\n\nexport function isIgnored(value: mixed): boolean {\n  if (typeof value === 'object' && value != null) {\n    return ignoredViewConfigProps.has(value);\n  }\n  return false;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativePlatformConstantsAndroid';\nimport NativePlatformConstantsAndroid from '../../src/private/specs/modules/NativePlatformConstantsAndroid';\nexport default NativePlatformConstantsAndroid;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {\n  Platform as PlatformType,\n  PlatformSelectSpec,\n} from './Platform.flow';\n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nconst Platform: PlatformType = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version(): number {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants(): {|\n    isTesting: boolean,\n    isDisableAnimations?: boolean,\n    reactNativeVersion: {|\n      major: number,\n      minor: number,\n      patch: number,\n      prerelease: ?string,\n    |},\n    Version: number,\n    Release: string,\n    Serial: string,\n    Fingerprint: string,\n    Model: string,\n    ServerHost?: string,\n    uiMode: string,\n    Brand: string,\n    Manufacturer: string,\n  |} {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting(): boolean {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isDisableAnimations(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isDisableAnimations ?? this.isTesting;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.uiMode === 'tv';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isVision(): boolean {\n    return false;\n  },\n  select: <T>(spec: PlatformSelectSpec<T>): T =>\n    'android' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.android\n      : 'native' in spec\n        ? // $FlowFixMe[incompatible-return]\n          spec.native\n        : // $FlowFixMe[incompatible-return]\n          spec.default,\n};\n\nmodule.exports = Platform;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../../../Libraries/TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n\nexport type ReactNativeVersionAndroid = {|\n  major: number,\n  minor: number,\n  patch: number,\n  prerelease: ?string,\n|};\n\nexport type PlatformConstantsAndroid = {|\n  isTesting: boolean,\n  isDisableAnimations?: boolean,\n  reactNativeVersion: ReactNativeVersionAndroid,\n  Version: number,\n  Release: string,\n  Serial: string,\n  Fingerprint: string,\n  Model: string,\n  ServerHost?: string,\n  uiMode: string,\n  Brand: string,\n  Manufacturer: string,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => PlatformConstantsAndroid;\n  +getAndroidID: () => string;\n}\n\nexport default (TurboModuleRegistry.getEnforcing<Spec>(\n  'PlatformConstants',\n): Spec);\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n"],"names":["value","Platform","OS","object","ignoredViewConfigProps","add","has","_Platform","_interopRequireDefault","require","WeakSet","_NativePlatformConstantsAndroid","e","r","__esModule","default","t","_getRequireWildcardCache","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","WeakMap","keys","forEach","key","prototype","_exportNames","exports","enumerable","NativePlatformConstantsAndroid","__constants","Version","this","constants","getConstants","isTesting","isDisableAnimations","_this$constants$isDis","isTV","uiMode","isVision","select","spec","android","native","module","TurboModuleRegistry","getEnforcing","condition","format","b","c","d","f","error","undefined","Error","args","argIndex","replace","name","framesToPop"],"sourceRoot":""}